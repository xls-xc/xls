package ${package.Controller};

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;

import com.xls.fx.config.PageInfo;
import com.xls.fx.component.ResultCode;
import com.xls.fx.component.ResultEntity;

import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Controller
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/${table.entityPath}")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired private ${table.serviceName} ${table.entityPath}Service;

    @GetMapping("/manager")
    public String manager() {
        return "fx/${table.entityPath}/${table.entityPath}List";
    }

    @PostMapping("/dataGrid")
    @ResponseBody
    public PageInfo dataGrid(@RequestParam(required = false)${entity} ${table.entityPath},
                                 @RequestParam(required = false)Integer page,
                                 @RequestParam(required = false)Integer rows,
                                 @RequestParam(required = false)String sort,
                                 @RequestParam(required = false)String order) {
          PageInfo pageInfo = new PageInfo(page, rows, isAsc(sort), order);
          try {
                pageInfo = new PageInfo(page, rows, isAsc(sort), order);
                EntityWrapper<${entity}> ew = new EntityWrapper<${entity}>(${table.entityPath});
                Page<${entity}> pages = getPage(page, rows, sort, order);
                pages = ${table.entityPath}Service.selectPage(pages, ew);
                int total = ${table.entityPath}Service.selectCount(ew);
                pageInfo.setRecords(pages.getRecords());
                pageInfo.setTotal(total);
          }catch (Exception e) {
                e.printStackTrace();
                logger.error("XcInteractionLogController dataGrid 出现异常：",e);
           }
           return pageInfo;
    }

    /**
     * 添加页面
     * @return
     */
    @GetMapping("/addPage")
    public String addPage() {
        return "fx/${table.entityPath}/${table.entityPath}Add";
    }

    /**
     * 添加
     * @param
     * @return
     */
    @PostMapping("/add")
    @ResponseBody
    public Object add(@Valid ${entity} ${table.entityPath}) {
         if(xcInteractionLog ==null) {
            return ResultEntity.getEntityError(ResultCode.PARAM_NULL);
            }
            Boolean updateResult;

            try {
                updateResult = ${table.entityPath}Service.insert(${table.entityPath});
            }catch (Exception e) {
                e.printStackTrace();
                logger.error("XcInteractionLogController add 出现异常：",e);
                return ResultEntity.getEntityError();
            }

            if(updateResult) {
                return ResultEntity.getEntitySuccess();
            }
        return ResultEntity.getEntityError(ResultCode.PARAM_OPERATION_ERROR);
    }

    /**
     * 删除
     * @param id
     * @return
     */
    @PostMapping("/delete")
    @ResponseBody
    public Object delete(Long id) {
         if(id ==null) {
                return ResultEntity.getEntityError(ResultCode.PARAM_NULL);
            }
            Boolean updateResult;
            try {
                ${entity} ${table.entityPath} = new ${entity}();
                updateResult = ${table.entityPath}Service.updateById(${table.entityPath});
            }catch (Exception e) {
                e.printStackTrace();
                logger.error("XcInteractionLogController delete 出现异常：",e);
                return ResultEntity.getEntityError();
            }

            if(updateResult) {
                return ResultEntity.getEntitySuccess();
            }
         return ResultEntity.getEntityError(ResultCode.PARAM_OPERATION_ERROR);
    }

    /**
     * 编辑
     * @param model
     * @param id
     * @return
     */
    @GetMapping("/editPage")
    public String editPage(Model model, Long id) {
          ${entity} ${table.entityPath} = null;
          try {
              ${table.entityPath} = ${table.entityPath}Service.selectById(id);
          }catch (Exception e) {
              e.printStackTrace();
              logger.error("XcInteractionLogController editPage 出现异常：",e);
          }
          model.addAttribute("xcInteractionLog", ${table.entityPath});
          return "fx/xcInteractionLog/xcInteractionLogEdit";
    }

    /**
     * 编辑
     * @param
     * @return
     */
    @PostMapping("/edit")
    @ResponseBody
    public Object edit(@Valid ${entity} ${table.entityPath}) {
        if(xcInteractionLog ==null) {
            return ResultEntity.getEntityError(ResultCode.PARAM_NULL);
        }
        Boolean updateResult;

        try {
            updateResult = ${table.entityPath}Service.updateById(${table.entityPath});
        }catch (Exception e) {
            e.printStackTrace();
            logger.error("XcInteractionLogController edit 出现异常：",e);
            return ResultEntity.getEntityError();
        }

        if(updateResult) {
            return ResultEntity.getEntitySuccess();
        }
        return ResultEntity.getEntityError(ResultCode.PARAM_OPERATION_ERROR);
    }
}